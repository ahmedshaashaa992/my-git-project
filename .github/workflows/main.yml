name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: windows-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      PROJECT_DIR: 'frontend'  # Your frontend directory name

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Verify directory structure (Pure PowerShell)
      - name: Validate project structure
        shell: pwsh
        run: |
          Write-Output "Current directory contents:"
          Get-ChildItem
          
          if (-not (Test-Path -Path $env:PROJECT_DIR)) {
            Write-Error "Project directory '$env:PROJECT_DIR' not found!"
            exit 1
          }
          
          Write-Output "Contents of $env:PROJECT_DIR:"
          Get-ChildItem $env:PROJECT_DIR
          
          if (-not (Test-Path -Path "$env:PROJECT_DIR/package.json")) {
            Write-Error "package.json not found in $env:PROJECT_DIR!"
            exit 1
          }

      # 3. Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ env.PROJECT_DIR }}/package-lock.json'

      # 4. Install dependencies (PowerShell)
      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        shell: pwsh
        run: |
          Write-Output "Installing in directory: $(Get-Location)"
          if (Test-Path "package-lock.json") {
            npm ci
          } elseif (Test-Path "yarn.lock") {
            yarn install --frozen-lockfile
          } else {
            npm install
          }

      # 5. Build project (PowerShell)
      - name: Build project
        working-directory: ${{ env.PROJECT_DIR }}
        shell: pwsh
        run: |
          npm run build
          # Fix asset paths
          (Get-Content "dist/index.html") -replace '/assets/', 'my-git-project/assets/' | Set-Content "dist/index.html"
          # Create 404.html
          Copy-Item "dist/index.html" "dist/404.html"
          # Verify build
          Get-ChildItem "dist" -Recurse

      # 6. Deploy to GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.PROJECT_DIR }}/dist'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4